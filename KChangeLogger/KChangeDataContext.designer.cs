#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KChangeLogger
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="KChangeDB")]
	public partial class KChangeDataContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertLanguage(Language instance);
    partial void UpdateLanguage(Language instance);
    partial void DeleteLanguage(Language instance);
    partial void InsertChange_Type(Change_Type instance);
    partial void UpdateChange_Type(Change_Type instance);
    partial void DeleteChange_Type(Change_Type instance);
    partial void InsertProject_Change(Project_Change instance);
    partial void UpdateProject_Change(Project_Change instance);
    partial void DeleteProject_Change(Project_Change instance);
    partial void InsertProject_File(Project_File instance);
    partial void UpdateProject_File(Project_File instance);
    partial void DeleteProject_File(Project_File instance);
    partial void InsertLog(Log instance);
    partial void UpdateLog(Log instance);
    partial void DeleteLog(Log instance);
    partial void InsertLog_Type(Log_Type instance);
    partial void UpdateLog_Type(Log_Type instance);
    partial void DeleteLog_Type(Log_Type instance);
    #endregion
		
		public KChangeDataContextDataContext() : 
				base(global::KChangeLogger.Properties.Settings.Default.KChangeDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public KChangeDataContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KChangeDataContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KChangeDataContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KChangeDataContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<Language> Languages
		{
			get
			{
				return this.GetTable<Language>();
			}
		}
		
		public System.Data.Linq.Table<Change_Type> Change_Types
		{
			get
			{
				return this.GetTable<Change_Type>();
			}
		}
		
		public System.Data.Linq.Table<Project_Change> Project_Changes
		{
			get
			{
				return this.GetTable<Project_Change>();
			}
		}
		
		public System.Data.Linq.Table<Project_File> Project_Files
		{
			get
			{
				return this.GetTable<Project_File>();
			}
		}
		
		public System.Data.Linq.Table<Log> Logs
		{
			get
			{
				return this.GetTable<Log>();
			}
		}
		
		public System.Data.Linq.Table<Log_Type> Log_Types
		{
			get
			{
				return this.GetTable<Log_Type>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _Created;
		
		private int _Language;
		
		private string _Physical_Path;
		
		private EntitySet<Project_Change> _Project_Changes;
		
		private EntitySet<Project_File> _Project_Files;
		
		private EntityRef<Language> _Language1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLanguageChanging(int value);
    partial void OnLanguageChanged();
    partial void OnPhysical_PathChanging(string value);
    partial void OnPhysical_PathChanged();
    #endregion
		
		public Project()
		{
			this._Project_Changes = new EntitySet<Project_Change>(new Action<Project_Change>(this.attach_Project_Changes), new Action<Project_Change>(this.detach_Project_Changes));
			this._Project_Files = new EntitySet<Project_File>(new Action<Project_File>(this.attach_Project_Files), new Action<Project_File>(this.detach_Project_Files));
			this._Language1 = default(EntityRef<Language>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="Int NOT NULL")]
		public int Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					if (this._Language1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageChanging(value);
					this.SendPropertyChanging();
					this._Language = value;
					this.SendPropertyChanged("Language");
					this.OnLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Physical_Path", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Physical_Path
		{
			get
			{
				return this._Physical_Path;
			}
			set
			{
				if ((this._Physical_Path != value))
				{
					this.OnPhysical_PathChanging(value);
					this.SendPropertyChanging();
					this._Physical_Path = value;
					this.SendPropertyChanged("Physical_Path");
					this.OnPhysical_PathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Project_Change", Storage="_Project_Changes", ThisKey="ID", OtherKey="Project_ID")]
		public EntitySet<Project_Change> Project_Changes
		{
			get
			{
				return this._Project_Changes;
			}
			set
			{
				this._Project_Changes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Project_File", Storage="_Project_Files", ThisKey="ID", OtherKey="Project_ID")]
		public EntitySet<Project_File> Project_Files
		{
			get
			{
				return this._Project_Files;
			}
			set
			{
				this._Project_Files.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_Project", Storage="_Language1", ThisKey="Language", OtherKey="ID", IsForeignKey=true)]
		public Language Language1
		{
			get
			{
				return this._Language1.Entity;
			}
			set
			{
				Language previousValue = this._Language1.Entity;
				if (((previousValue != value) 
							|| (this._Language1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language1.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Language1.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._Language = value.ID;
					}
					else
					{
						this._Language = default(int);
					}
					this.SendPropertyChanged("Language1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Project_Changes(Project_Change entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Project_Changes(Project_Change entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_Project_Files(Project_File entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Project_Files(Project_File entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Languages")]
	public partial class Language : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Description;
		
		private EntitySet<Project> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Language()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_Project", Storage="_Projects", ThisKey="ID", OtherKey="Language")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Language1 = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Language1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Change_Type")]
	public partial class Change_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Description;
		
		private EntitySet<Project_Change> _Project_Changes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Change_Type()
		{
			this._Project_Changes = new EntitySet<Project_Change>(new Action<Project_Change>(this.attach_Project_Changes), new Action<Project_Change>(this.detach_Project_Changes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Change_Type_Project_Change", Storage="_Project_Changes", ThisKey="ID", OtherKey="ChangeType")]
		public EntitySet<Project_Change> Project_Changes
		{
			get
			{
				return this._Project_Changes;
			}
			set
			{
				this._Project_Changes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Project_Changes(Project_Change entity)
		{
			this.SendPropertyChanging();
			entity.Change_Type = this;
		}
		
		private void detach_Project_Changes(Project_Change entity)
		{
			this.SendPropertyChanging();
			entity.Change_Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project_Change")]
	public partial class Project_Change : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Project_ID;
		
		private int _ID_Change;
		
		private System.Nullable<int> _File_ID;
		
		private int _ChangeType;
		
		private string _ChangeDescription;
		
		private string _ChangedBy;
		
		private System.DateTime _ChangeDate;
		
		private EntityRef<Change_Type> _Change_Type;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<Project_File> _Project_File;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProject_IDChanging(int value);
    partial void OnProject_IDChanged();
    partial void OnID_ChangeChanging(int value);
    partial void OnID_ChangeChanged();
    partial void OnFile_IDChanging(System.Nullable<int> value);
    partial void OnFile_IDChanged();
    partial void OnChangeTypeChanging(int value);
    partial void OnChangeTypeChanged();
    partial void OnChangeDescriptionChanging(string value);
    partial void OnChangeDescriptionChanged();
    partial void OnChangedByChanging(string value);
    partial void OnChangedByChanged();
    partial void OnChangeDateChanging(System.DateTime value);
    partial void OnChangeDateChanged();
    #endregion
		
		public Project_Change()
		{
			this._Change_Type = default(EntityRef<Change_Type>);
			this._Project = default(EntityRef<Project>);
			this._Project_File = default(EntityRef<Project_File>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Project_ID", DbType="Int NOT NULL")]
		public int Project_ID
		{
			get
			{
				return this._Project_ID;
			}
			set
			{
				if ((this._Project_ID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProject_IDChanging(value);
					this.SendPropertyChanging();
					this._Project_ID = value;
					this.SendPropertyChanged("Project_ID");
					this.OnProject_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Change", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Change
		{
			get
			{
				return this._ID_Change;
			}
			set
			{
				if ((this._ID_Change != value))
				{
					this.OnID_ChangeChanging(value);
					this.SendPropertyChanging();
					this._ID_Change = value;
					this.SendPropertyChanged("ID_Change");
					this.OnID_ChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_File_ID", DbType="Int")]
		public System.Nullable<int> File_ID
		{
			get
			{
				return this._File_ID;
			}
			set
			{
				if ((this._File_ID != value))
				{
					if (this._Project_File.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFile_IDChanging(value);
					this.SendPropertyChanging();
					this._File_ID = value;
					this.SendPropertyChanged("File_ID");
					this.OnFile_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeType", DbType="Int NOT NULL")]
		public int ChangeType
		{
			get
			{
				return this._ChangeType;
			}
			set
			{
				if ((this._ChangeType != value))
				{
					if (this._Change_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChangeTypeChanging(value);
					this.SendPropertyChanging();
					this._ChangeType = value;
					this.SendPropertyChanged("ChangeType");
					this.OnChangeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeDescription", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string ChangeDescription
		{
			get
			{
				return this._ChangeDescription;
			}
			set
			{
				if ((this._ChangeDescription != value))
				{
					this.OnChangeDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ChangeDescription = value;
					this.SendPropertyChanged("ChangeDescription");
					this.OnChangeDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangedBy", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ChangedBy
		{
			get
			{
				return this._ChangedBy;
			}
			set
			{
				if ((this._ChangedBy != value))
				{
					this.OnChangedByChanging(value);
					this.SendPropertyChanging();
					this._ChangedBy = value;
					this.SendPropertyChanged("ChangedBy");
					this.OnChangedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeDate", DbType="DateTime NOT NULL")]
		public System.DateTime ChangeDate
		{
			get
			{
				return this._ChangeDate;
			}
			set
			{
				if ((this._ChangeDate != value))
				{
					this.OnChangeDateChanging(value);
					this.SendPropertyChanging();
					this._ChangeDate = value;
					this.SendPropertyChanged("ChangeDate");
					this.OnChangeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Change_Type_Project_Change", Storage="_Change_Type", ThisKey="ChangeType", OtherKey="ID", IsForeignKey=true)]
		public Change_Type Change_Type
		{
			get
			{
				return this._Change_Type.Entity;
			}
			set
			{
				Change_Type previousValue = this._Change_Type.Entity;
				if (((previousValue != value) 
							|| (this._Change_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Change_Type.Entity = null;
						previousValue.Project_Changes.Remove(this);
					}
					this._Change_Type.Entity = value;
					if ((value != null))
					{
						value.Project_Changes.Add(this);
						this._ChangeType = value.ID;
					}
					else
					{
						this._ChangeType = default(int);
					}
					this.SendPropertyChanged("Change_Type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Project_Change", Storage="_Project", ThisKey="Project_ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Project_Changes.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Project_Changes.Add(this);
						this._Project_ID = value.ID;
					}
					else
					{
						this._Project_ID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_File_Project_Change", Storage="_Project_File", ThisKey="File_ID", OtherKey="File_ID", IsForeignKey=true)]
		public Project_File Project_File
		{
			get
			{
				return this._Project_File.Entity;
			}
			set
			{
				Project_File previousValue = this._Project_File.Entity;
				if (((previousValue != value) 
							|| (this._Project_File.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project_File.Entity = null;
						previousValue.Project_Change.Remove(this);
					}
					this._Project_File.Entity = value;
					if ((value != null))
					{
						value.Project_Change.Add(this);
						this._File_ID = value.File_ID;
					}
					else
					{
						this._File_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Project_File");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project_File")]
	public partial class Project_File : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Project_ID;
		
		private int _File_ID;
		
		private string _File_Name;
		
		private string _File_Path;
		
		private EntitySet<Project_Change> _Project_Change;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProject_IDChanging(int value);
    partial void OnProject_IDChanged();
    partial void OnFile_IDChanging(int value);
    partial void OnFile_IDChanged();
    partial void OnFile_NameChanging(string value);
    partial void OnFile_NameChanged();
    partial void OnFile_PathChanging(string value);
    partial void OnFile_PathChanged();
    #endregion
		
		public Project_File()
		{
			this._Project_Change = new EntitySet<Project_Change>(new Action<Project_Change>(this.attach_Project_Change), new Action<Project_Change>(this.detach_Project_Change));
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Project_ID", DbType="Int NOT NULL")]
		public int Project_ID
		{
			get
			{
				return this._Project_ID;
			}
			set
			{
				if ((this._Project_ID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProject_IDChanging(value);
					this.SendPropertyChanging();
					this._Project_ID = value;
					this.SendPropertyChanged("Project_ID");
					this.OnProject_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_File_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int File_ID
		{
			get
			{
				return this._File_ID;
			}
			set
			{
				if ((this._File_ID != value))
				{
					this.OnFile_IDChanging(value);
					this.SendPropertyChanging();
					this._File_ID = value;
					this.SendPropertyChanged("File_ID");
					this.OnFile_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_File_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string File_Name
		{
			get
			{
				return this._File_Name;
			}
			set
			{
				if ((this._File_Name != value))
				{
					this.OnFile_NameChanging(value);
					this.SendPropertyChanging();
					this._File_Name = value;
					this.SendPropertyChanged("File_Name");
					this.OnFile_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_File_Path", DbType="NVarChar(300)")]
		public string File_Path
		{
			get
			{
				return this._File_Path;
			}
			set
			{
				if ((this._File_Path != value))
				{
					this.OnFile_PathChanging(value);
					this.SendPropertyChanging();
					this._File_Path = value;
					this.SendPropertyChanged("File_Path");
					this.OnFile_PathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_File_Project_Change", Storage="_Project_Change", ThisKey="File_ID", OtherKey="File_ID")]
		public EntitySet<Project_Change> Project_Change
		{
			get
			{
				return this._Project_Change;
			}
			set
			{
				this._Project_Change.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Project_File", Storage="_Project", ThisKey="Project_ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Project_Files.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Project_Files.Add(this);
						this._Project_ID = value.ID;
					}
					else
					{
						this._Project_ID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Project_Change(Project_Change entity)
		{
			this.SendPropertyChanging();
			entity.Project_File = this;
		}
		
		private void detach_Project_Change(Project_Change entity)
		{
			this.SendPropertyChanging();
			entity.Project_File = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Log]")]
	public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Log_Type;
		
		private System.DateTime _Log_Time;
		
		private string _Log_Message;
		
		private EntityRef<Log_Type> _Log_Type1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLog_TypeChanging(int value);
    partial void OnLog_TypeChanged();
    partial void OnLog_TimeChanging(System.DateTime value);
    partial void OnLog_TimeChanged();
    partial void OnLog_MessageChanging(string value);
    partial void OnLog_MessageChanged();
    #endregion
		
		public Log()
		{
			this._Log_Type1 = default(EntityRef<Log_Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Log_Type", DbType="Int NOT NULL")]
		public int Log_Type
		{
			get
			{
				return this._Log_Type;
			}
			set
			{
				if ((this._Log_Type != value))
				{
					if (this._Log_Type1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLog_TypeChanging(value);
					this.SendPropertyChanging();
					this._Log_Type = value;
					this.SendPropertyChanged("Log_Type");
					this.OnLog_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Log_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Log_Time
		{
			get
			{
				return this._Log_Time;
			}
			set
			{
				if ((this._Log_Time != value))
				{
					this.OnLog_TimeChanging(value);
					this.SendPropertyChanging();
					this._Log_Time = value;
					this.SendPropertyChanged("Log_Time");
					this.OnLog_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Log_Message", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string Log_Message
		{
			get
			{
				return this._Log_Message;
			}
			set
			{
				if ((this._Log_Message != value))
				{
					this.OnLog_MessageChanging(value);
					this.SendPropertyChanging();
					this._Log_Message = value;
					this.SendPropertyChanged("Log_Message");
					this.OnLog_MessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Log_Type_Log", Storage="_Log_Type1", ThisKey="Log_Type", OtherKey="ID", IsForeignKey=true)]
		public Log_Type Log_Type1
		{
			get
			{
				return this._Log_Type1.Entity;
			}
			set
			{
				Log_Type previousValue = this._Log_Type1.Entity;
				if (((previousValue != value) 
							|| (this._Log_Type1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Log_Type1.Entity = null;
						previousValue.Logs.Remove(this);
					}
					this._Log_Type1.Entity = value;
					if ((value != null))
					{
						value.Logs.Add(this);
						this._Log_Type = value.ID;
					}
					else
					{
						this._Log_Type = default(int);
					}
					this.SendPropertyChanged("Log_Type1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Log_Type")]
	public partial class Log_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Type;
		
		private string _Description;
		
		private EntitySet<Log> _Logs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Log_Type()
		{
			this._Logs = new EntitySet<Log>(new Action<Log>(this.attach_Logs), new Action<Log>(this.detach_Logs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Log_Type_Log", Storage="_Logs", ThisKey="ID", OtherKey="Log_Type")]
		public EntitySet<Log> Logs
		{
			get
			{
				return this._Logs;
			}
			set
			{
				this._Logs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Log_Type1 = this;
		}
		
		private void detach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Log_Type1 = null;
		}
	}
}
#pragma warning restore 1591
